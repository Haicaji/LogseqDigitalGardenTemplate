#!/bin/sh

# 日志记录格式
# $year-$month-$day $hour:$minute:$second $log_text

# 获取当前路径
current_path=$(pwd)
# 设置日志路径
log_file_name="$current_path/../upload.log"

# 转换图片格式
# 写入日志: "图片格式开始转换"
echo "$(date '+%Y-%m-%d %H:%M:%S') 1.图片格式开始转换(...)" >> $log_file_name
# 执行 imageToAVIF
../ImageToAVIF/ImageToAVIF.exe ./assets &>> $log_file_name
# 检查 imageToAVIF 执行是否成功
if [ $? -ne 0 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') 1.图片格式转换失败(...)" >> $log_file_name
    # 如果失败, 退出脚本
    exit 1
fi
echo "$(date '+%Y-%m-%d %H:%M:%S') 1.图片格式转换完成(...)" >> $log_file_name

# 生成发布网页
# 写入日志: "发布网页开始生成"
echo "$(date '+%Y-%m-%d %H:%M:%S') 2.发布网页开始生成(...)" >> $log_file_name
# 执行 logseq-publish-spa out
../Node/logseq-publish-spa ../PublishWeb &>> $log_file_name
# 检查 logseq-publish-spa 执行是否成功
if [ $? -ne 0 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') 2.发布网页生成失败(...)" >> $log_file_name
    # 如果失败, 退出脚本
    exit 1
fi
echo "$(date '+%Y-%m-%d %H:%M:%S') 2.发布网页生成完成(...)" >> $log_file_name

# 同步到Github远程仓库
# 写入日志: "发布网页开始上传"
echo "$(date '+%Y-%m-%d %H:%M:%S') 3.发布网页开始上传(...)" >> $log_file_name
# 进入 ../PublishWeb 目录
cd ../PublishWeb
# 添加所有更改
git add -A
git commit -m "Logseq Auto Publish" &>> $log_file_name
# 推送到远程仓库的 main 分支
git push origin main &>> $log_file_name
if [ $? -ne 0 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') 3.发布网页上传完成(...)" >> $log_file_name
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') 3.发布网页上传失败(...)" >> $log_file_name
    # 如果失败, 退出脚本
    exit 1
fi


# 写入日志: "结束上传"
echo "$(date '+%Y-%m-%d %H:%M:%S') 结束上传(...)" >> $log_file_name
